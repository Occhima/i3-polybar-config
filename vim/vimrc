runtime! archlinux.vim
so ~/.vim/plugins.vim
map <C-t> :NERDTreeToggle<CR>

" reformat (without plugins)
map <F7> mzgg=G`z
" compile c++ file
map <F8> :w <CR> :!g++ % -o %<  <CR>
" execute c++ file with input.txt as stdin
map <F9> :!cat input.txt \| ./%<  <CR>
map <F10> :!cat test_input.txt \| ./%<  <CR>
" fzf search on files
map ; :Files<CR>

" move line up and down
nnoremap <C-S-Up> <Up>"add"ap<Up>
nnoremap <C-S-Down> "add"ap

" Format c code
nnoremap <C-S-i> :ClangFormat <CR>

" highlight every search match
nnoremap <C-h> :set hlsearch!<CR>

" smooth scroll
noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
let g:comfortable_motion_friction = 0.0
let g:comfortable_motion_air_drag = 10.0

let g:ycm_python_interpreter_path = ''
let g:ycm_python_sys_path = []
let g:ycm_extra_conf_vim_data = [
  \  'g:ycm_python_interpreter_path',
  \  'g:ycm_python_sys_path'
  \]
let g:ycm_global_ycm_extra_conf = '~/.vim/YouCompleteMe/global_extra_conf.py'

let vim_markdown_preview_github=1
let vim_markdown_preview_browser='chromium'

let g:indent_gruides_start_level = 2
let g:indent_gruides_guide_size = 2

let g:indent_guides_enable_on_vim_startup = 1
" indentation settings
set tabstop=3
set shiftwidth=3
set softtabstop=0 expandtab
set incsearch

" thanks to wincent
set foldmethod=indent               " not as cool as syntax, but faster
 " folding
nnoremap <s-tab> za
" 
let g:clang_format#style_options = {
            \ "Standard" : "C++11",
            \ "IndentWidth" : 3,
            \ "UseTab" : "false",
            \ "AccessModifierOffset" : -2,
            \ "ColumnLimit" : 0 }

" to enable copy-past to/from system clipboard
set clipboard=unnamedplus

set spell spelllang=en_gb
set nospell
set number
set cursorline
set mouse=a
syntax on 
 
set hlsearch

let mapleader=" "
nnoremap <silent> <Leader>f :NERDTreeFind<CR>
nnoremap <Leader>t :NERDTreeToggle<Enter>

nnoremap <Leader>d :YcmCompleter GoToDefinition <CR>
nnoremap <Leader>D :YcmCompleter GoToDeclaration <CR>
nnoremap <Leader>r :YcmCompleter GoToReferences <CR>

" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

noremap <leader>w :set wrap!<CR>

nnoremap <C-S-Left> :tabprevious<CR>
nnoremap <C-S-Right> :tabnext<CR>
nnoremap <C-Left> <C-o>
nnoremap <C-Right> <C-i>

nnoremap <leader>c :Gdiff<CR>

let NERDTreeMouseMode=2
let g:NERDTreeMapActivateNode='go'
let g:NERDTreeMapPreview='o'

" http://vim.wikia.com/wiki/Auto_highlight_current_word_when_idle
" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=300
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction

inoremap <silent><expr> <c-space> coc#refresh()
set background=dark
let g:gruvbox_italic=1
colorscheme gruvbox


" Better wrapping when the line conitnues
set wrap               " soft-wrap lines
set linebreak          " soft-wrap lines only at certain characters (see :help breakat)
set cpoptions+=n  
set showbreak=>>
" enable indentation
set breakindent
" ident by an additional 2 characters on wrapped lines, when line >= 40 characters, put 'showbreak' at start of line
set breakindentopt=shift:2,min:40,sbr


let g:vim_markdown_math = 0
let g:vim_markdown_auto_insert_bullets = 0
let g:vimtex_fold_enabled = 1
let g:livepreview_engine = 'pdflatex'
